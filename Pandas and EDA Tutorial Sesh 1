{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2965537,"sourceType":"datasetVersion","datasetId":1818188},{"sourceId":2824917,"sourceType":"datasetVersion","datasetId":1727728}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# A Basic Pandas and EDA Tutorial using the Titanic Dataset\n\n## Your starting step to ML","metadata":{}},{"cell_type":"markdown","source":"1. **Pandas - A Data Manipulation library - It will be your handy assistant for anything data in python.**\n2. **EDA - Exploratory Data Analysis - As the name suggests you explore the data at hand to fully comprehend it. Once you thoroughly understand your data, you will know what to do with your model**","metadata":{}},{"cell_type":"markdown","source":"### Pandas \nWe will use this for everything data. \nLoading, Manipulating and Preprocessing.\nNow cleaning your data and processing it will be one of the most tantalizing tasks of your ML career, but its the most rewarding and important, cause data makes or breaks your entire model. You will also grow as a person as data preprocessing will teach you the virtue of patience.","metadata":{}},{"cell_type":"markdown","source":"### EDA\n\nIt will look like a few colorful charts but, it's more than that, if you don't do this, you will have a tough time degugging your models, cause they love giving errors. Spare a few minutes analysing your data and understanding it, save hours of debugging, frustration and threats to your sanity. ","metadata":{}},{"cell_type":"markdown","source":"### About External Help \n\nNow like every goood tech person now we will also use ChatGPT, just don't use it mindlessly and understand the code it gives and ensure that you are in a position to understand it and correct it (cause sometimes it can be a big pain in the...). No shame in getting help, we all need help and we have quite the convinient source, but always ensure that your help actually helps you. \n\nYou can also employ human help in the form of friends, CC members, professors or anyone else. Just never be afraid to ask for help when stuck, the help being human or not.","metadata":{}},{"cell_type":"markdown","source":"## On to the Code\n\nBye bye rambling session, let's get down to business","metadata":{}},{"cell_type":"markdown","source":"## Import the necessary Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-17T12:04:17.236784Z","iopub.execute_input":"2025-01-17T12:04:17.237139Z","iopub.status.idle":"2025-01-17T12:04:17.595031Z","shell.execute_reply.started":"2025-01-17T12:04:17.237108Z","shell.execute_reply":"2025-01-17T12:04:17.594242Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"**Let us now load the data**\n\nBased on the environment the paths will change.abs\nThe general flow is :\n - Navigate to the csv\n - Copy the path\n - Paste in the ```read_csv``` function\n\nIn kaggle\n - Navigate to input\n - Go to datasets\n - Click on the drop down arrow next to titanic-dataset\n - Hover over train_and_test2.csv\n - The copy icon appears click that\n\nIn colab (assuming you uploaded the csv\n - Connect to drive\n - Select the file","metadata":{}},{"cell_type":"markdown","source":"## Load the data","metadata":{}},{"cell_type":"markdown","source":"We use the pandas function ```read_csv``` this will read our csv file and store it in a Pandas DataFrame.","metadata":{}},{"cell_type":"code","source":"# Load your data here\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:28:30.362137Z","iopub.execute_input":"2025-01-16T13:28:30.362576Z","iopub.status.idle":"2025-01-16T13:28:30.376281Z","shell.execute_reply.started":"2025-01-16T13:28:30.362540Z","shell.execute_reply":"2025-01-16T13:28:30.375088Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We have loaded our data!\nLet us visualize our data\nLet us see whats in the columns","metadata":{}},{"cell_type":"markdown","source":"## Exploring our Data\n\nWe need to fully understand our data, so let us get on to this","metadata":{}},{"cell_type":"markdown","source":"### Display the Data","metadata":{}},{"cell_type":"code","source":"print('Displaying the data') # For those of you unfamiliar with Python this is python's version of printf()\ndata\n# Some fun facts\n# usually doing this doesn't yield results\n# Most of the time you need a print statement\n# But the beauty of a python notebook is, if you give a single variable at the end and run the cell, \n# it displays its contents\n# Provided you haven't given any other variable or print statement after it","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:19:11.957886Z","iopub.execute_input":"2025-01-16T13:19:11.958250Z","iopub.status.idle":"2025-01-16T13:19:11.979163Z","shell.execute_reply.started":"2025-01-16T13:19:11.958199Z","shell.execute_reply":"2025-01-16T13:19:11.977870Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Let's use two Pandas functions to control how much and which part of the data we want to see.","metadata":{}},{"cell_type":"code","source":"data.head(10) # Displays the first 10 values, If you don't specify a value it will return first 5 rows (default)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T10:41:05.627352Z","iopub.execute_input":"2025-01-16T10:41:05.627717Z","iopub.status.idle":"2025-01-16T10:41:05.644488Z","shell.execute_reply.started":"2025-01-16T10:41:05.627686Z","shell.execute_reply":"2025-01-16T10:41:05.643305Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.tail(15) # Last 15 rows, if number of rows, not specified last 5","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T10:41:08.462947Z","iopub.execute_input":"2025-01-16T10:41:08.463329Z","iopub.status.idle":"2025-01-16T10:41:08.479803Z","shell.execute_reply.started":"2025-01-16T10:41:08.463293Z","shell.execute_reply":"2025-01-16T10:41:08.478670Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We successfully displayed our data!\n\nMoving on, let's analyze more about our data, see the datatypes, how its distributed, if there are any missing values and so on, let us also see all the columns, and check for outliers.\n\nAfter this session try modifying the parameter values passed to ```head``` and ```tail```.","metadata":{}},{"cell_type":"markdown","source":"### Explore the Data","metadata":{}},{"cell_type":"code","source":"data.info() # Gives us basic information about the dataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T10:41:10.852390Z","iopub.execute_input":"2025-01-16T10:41:10.852789Z","iopub.status.idle":"2025-01-16T10:41:10.881173Z","shell.execute_reply.started":"2025-01-16T10:41:10.852754Z","shell.execute_reply":"2025-01-16T10:41:10.879971Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.describe() # Gives us basic numerical measures for numeric datatypesda","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T10:41:14.353050Z","iopub.execute_input":"2025-01-16T10:41:14.353436Z","iopub.status.idle":"2025-01-16T10:41:14.381889Z","shell.execute_reply.started":"2025-01-16T10:41:14.353403Z","shell.execute_reply":"2025-01-16T10:41:14.380791Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### See the number of missing values columnwise\n\nWe shall be using ```isnull()``` and ``sum()`` for this.\nWe will be doing something called method chaining - applying two functions sequentially","metadata":{}},{"cell_type":"code","source":"data.isnull().sum() # This is called method chaining using two functions sequentially\n\n# isnull() - gives boolean values for whether a particular value is null or not\n# if null the value is true\n# sum - it sums up the values in a list/array/column\n# now our column is full of booleans - its sums of the True values (True = 1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T10:41:16.591882Z","iopub.execute_input":"2025-01-16T10:41:16.592219Z","iopub.status.idle":"2025-01-16T10:41:16.599980Z","shell.execute_reply.started":"2025-01-16T10:41:16.592191Z","shell.execute_reply":"2025-01-16T10:41:16.598934Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Let's explore the columns","metadata":{}},{"cell_type":"code","source":"data.columns # See all the columns in the data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T10:41:18.968999Z","iopub.execute_input":"2025-01-16T10:41:18.969354Z","iopub.status.idle":"2025-01-16T10:41:18.975768Z","shell.execute_reply.started":"2025-01-16T10:41:18.969324Z","shell.execute_reply":"2025-01-16T10:41:18.974527Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Let us see the values in a particular column","metadata":{}},{"cell_type":"code","source":"data['Column_Name'] # Choose the column you want","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-14T12:17:49.119640Z","iopub.status.idle":"2025-01-14T12:17:49.120032Z","shell.execute_reply":"2025-01-14T12:17:49.119878Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.Column_Name # This also works when we don't have any spaces in the column name","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-14T12:17:49.121339Z","iopub.status.idle":"2025-01-14T12:17:49.121783Z","shell.execute_reply":"2025-01-14T12:17:49.121593Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Little exercise - apply one of above functions to a column","metadata":{}},{"cell_type":"code","source":"data.Column_Name.func() # Replace with a column and function of your choice","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-14T12:17:49.122548Z","iopub.status.idle":"2025-01-14T12:17:49.123038Z","shell.execute_reply":"2025-01-14T12:17:49.122788Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for col in data.columns: # iterating through all the columns\n    print(col, data[col].nunique()) # displaying the number of unique values ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T10:41:26.093899Z","iopub.execute_input":"2025-01-16T10:41:26.094247Z","iopub.status.idle":"2025-01-16T10:41:26.110396Z","shell.execute_reply.started":"2025-01-16T10:41:26.094194Z","shell.execute_reply":"2025-01-16T10:41:26.109331Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Exercise for you!\n##### See the unique values in the Embarked column \n\n\nHint - the function you should be using is ```unique()```","metadata":{}},{"cell_type":"code","source":"# Write the code here","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-14T12:17:49.125659Z","iopub.status.idle":"2025-01-14T12:17:49.126079Z","shell.execute_reply":"2025-01-14T12:17:49.125890Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Visualization!","metadata":{}},{"cell_type":"markdown","source":"### Import the necessary libraries\n\nMatplotlib and Seaborn are the standard visualization librarires in Python.\nSeaborn is built on top of matplotlib.\nWe will be using these to visualize our data","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T10:41:28.901572Z","iopub.execute_input":"2025-01-16T10:41:28.901941Z","iopub.status.idle":"2025-01-16T10:41:29.793069Z","shell.execute_reply.started":"2025-01-16T10:41:28.901909Z","shell.execute_reply":"2025-01-16T10:41:29.791967Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.hist(data['Age'], edgecolor = 'black', color=(0.2,0.7,1))\nplt.title('Distribution of Ages')\nplt.xlabel('Age')\nplt.ylabel('Counts')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:19:16.961706Z","iopub.execute_input":"2025-01-16T13:19:16.962092Z","iopub.status.idle":"2025-01-16T13:19:17.280123Z","shell.execute_reply.started":"2025-01-16T13:19:16.962061Z","shell.execute_reply":"2025-01-16T13:19:17.278915Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.hist(data['Survived'], edgecolor = 'black', color=(0.2,0.7,1))\nplt.title('Distribution of Survival')\nplt.xlabel('Age')\nplt.ylabel('Counts')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:19:20.143969Z","iopub.execute_input":"2025-01-16T13:19:20.144368Z","iopub.status.idle":"2025-01-16T13:19:20.623599Z","shell.execute_reply.started":"2025-01-16T13:19:20.144334Z","shell.execute_reply":"2025-01-16T13:19:20.622213Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"These are a few basic graphs.\nBut we can make more sophisticated ones - visualizing multiple columns at once.\nThis is where seaborn comes in - its more sophisticated","metadata":{}},{"cell_type":"code","source":"sns.catplot(x='Age', data = data, hue = 'Survived', kind = 'count')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:19:24.631462Z","iopub.execute_input":"2025-01-16T13:19:24.631939Z","iopub.status.idle":"2025-01-16T13:19:26.230928Z","shell.execute_reply.started":"2025-01-16T13:19:24.631901Z","shell.execute_reply":"2025-01-16T13:19:26.229987Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This doesn't look that nice..\n\nCan we make it better?\n\nYes!","metadata":{}},{"cell_type":"code","source":"data['Age_Category'] = data.Age # We are creating a column called Age_Category for visualization\n\n# Creating a function - this is just going to categorize people based on age - kinda a binning technique\ndef cats(val):\n    if pd.isna(val):  # Check if the value is NaN\n        return 'NIL' \n    elif val<=12:\n        return 'Child'\n    elif val<=19:\n        return 'Teenager'\n    elif val<=25:\n        return 'Young Adult'\n    elif val<=43:\n        return 'Adult'\n    elif val<= 60:\n        return 'MiddleAged'\n    else:\n        return 'Senior'\n\ndata.Age_Category = data.Age.apply(cats) # apply is used to apply a function\n# The dictionary equivalent is a map, where we map the values based on dictionary keys","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:28:35.537094Z","iopub.execute_input":"2025-01-16T13:28:35.537492Z","iopub.status.idle":"2025-01-16T13:28:35.545905Z","shell.execute_reply.started":"2025-01-16T13:28:35.537456Z","shell.execute_reply":"2025-01-16T13:28:35.544308Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.catplot(x='Age_Category', data = data, hue = 'Survived', kind = 'count', palette='summer')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:22:43.780367Z","iopub.execute_input":"2025-01-16T13:22:43.780706Z","iopub.status.idle":"2025-01-16T13:22:44.283286Z","shell.execute_reply.started":"2025-01-16T13:22:43.780677Z","shell.execute_reply":"2025-01-16T13:22:44.282353Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Much better! Let's also add gender into the picture","metadata":{}},{"cell_type":"code","source":"sns.catplot(x='Age_Category', data = data, hue = 'Survived', kind = 'count', col = 'Sex', palette='spring')\nplt.title('Survival by Age Gender-wise')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T12:36:01.552707Z","iopub.execute_input":"2025-01-16T12:36:01.553076Z","iopub.status.idle":"2025-01-16T12:36:02.453950Z","shell.execute_reply.started":"2025-01-16T12:36:01.553047Z","shell.execute_reply":"2025-01-16T12:36:02.452926Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Let us see the survival per age class wise","metadata":{}},{"cell_type":"code","source":"print('Survival by Age Class Wise')\nsns.catplot(x='Age_Category', data = data, hue = 'Survived', kind = 'count', col = 'Pclass', palette='autumn')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T12:36:06.485814Z","iopub.execute_input":"2025-01-16T12:36:06.486156Z","iopub.status.idle":"2025-01-16T12:36:07.474030Z","shell.execute_reply.started":"2025-01-16T12:36:06.486128Z","shell.execute_reply":"2025-01-16T12:36:07.472857Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Sex and Class","metadata":{}},{"cell_type":"code","source":"print('Survival by class, gender-wise')\nsns.catplot(x='Pclass', data = data, hue = 'Survived', kind = 'count', col = 'Sex', palette = 'husl')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T12:36:11.690315Z","iopub.execute_input":"2025-01-16T12:36:11.690687Z","iopub.status.idle":"2025-01-16T12:36:12.412956Z","shell.execute_reply.started":"2025-01-16T12:36:11.690654Z","shell.execute_reply":"2025-01-16T12:36:12.411516Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Cleaning Data - Removing Missing Values","metadata":{}},{"cell_type":"markdown","source":"Age column has some missing values, let us try to fill them. But before that let us analyze the distribution of Age wrt several parameters.","metadata":{}},{"cell_type":"code","source":"print('Age Distribution Class Wise')\nsns.catplot(x='Age_Category', data = data, kind = 'count', palette='twilight')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:34:47.891293Z","iopub.execute_input":"2025-01-16T13:34:47.891685Z","iopub.status.idle":"2025-01-16T13:34:48.256122Z","shell.execute_reply.started":"2025-01-16T13:34:47.891652Z","shell.execute_reply":"2025-01-16T13:34:48.254911Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print('Age Distribution Class Wise')\nsns.catplot(x='Age_Category', data = data, kind = 'count', col = 'Pclass', palette='husl')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:34:43.988937Z","iopub.execute_input":"2025-01-16T13:34:43.989324Z","iopub.status.idle":"2025-01-16T13:34:44.867046Z","shell.execute_reply.started":"2025-01-16T13:34:43.989289Z","shell.execute_reply":"2025-01-16T13:34:44.865737Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print('Age Distribution Class Wise differentiated by gender')\nsns.catplot(x='Age_Category', data = data, kind = 'count', col = 'Pclass', hue = 'Sex', palette='plasma')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:34:51.345934Z","iopub.execute_input":"2025-01-16T13:34:51.346328Z","iopub.status.idle":"2025-01-16T13:34:52.502512Z","shell.execute_reply.started":"2025-01-16T13:34:51.346292Z","shell.execute_reply":"2025-01-16T13:34:52.501040Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We can see the distribution varies from class to class and also gender wise. Let us group our data class wise and gender wise and then fill in the missing values. Always remember whenever we fill we want to preserve the distribution of the data.","metadata":{}},{"cell_type":"code","source":"data['Age'] = data.groupby(['Sex','Pclass', 'Survived'])['Age'].transform(lambda x : x.fillna(x.mean()))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:34:55.983016Z","iopub.execute_input":"2025-01-16T13:34:55.983431Z","iopub.status.idle":"2025-01-16T13:34:55.995726Z","shell.execute_reply.started":"2025-01-16T13:34:55.983395Z","shell.execute_reply":"2025-01-16T13:34:55.994639Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Redefine the categories","metadata":{}},{"cell_type":"code","source":"data.Age_Category = data.Age.apply(cats)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:35:37.522188Z","iopub.execute_input":"2025-01-16T13:35:37.522574Z","iopub.status.idle":"2025-01-16T13:35:37.528901Z","shell.execute_reply.started":"2025-01-16T13:35:37.522543Z","shell.execute_reply":"2025-01-16T13:35:37.527766Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print('Age Distribution Class Wise')\nsns.catplot(x='Age_Category', data = data, kind = 'count', palette='twilight')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:35:39.960630Z","iopub.execute_input":"2025-01-16T13:35:39.961015Z","iopub.status.idle":"2025-01-16T13:35:40.326919Z","shell.execute_reply.started":"2025-01-16T13:35:39.960980Z","shell.execute_reply":"2025-01-16T13:35:40.325897Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print('Age Distribution Class Wise differentiated by gender')\nsns.catplot(x='Age_Category', data = data, kind = 'count', col = 'Pclass', hue = 'Survived', palette='cool')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:35:42.519928Z","iopub.execute_input":"2025-01-16T13:35:42.520329Z","iopub.status.idle":"2025-01-16T13:35:43.536645Z","shell.execute_reply.started":"2025-01-16T13:35:42.520293Z","shell.execute_reply":"2025-01-16T13:35:43.535389Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Outlier Analysis","metadata":{}},{"cell_type":"markdown","source":"So Outliers are points outside your data's range, hence the name. We don't need to go in depth but they skew your data essentially - making predictions off.\nTo garner an understanding take this example:\nIn a company of 50 employees, 49 employees earn 100rs, but one employee earns 100000rs. Now when we average the salary, it won't be 100 but 6900, which is very off. We want to see what most employees earn, but the outlier affects the average (it is called mean in data science terms). Now this is oversimplified but this definition should suffice for now.","metadata":{}},{"cell_type":"markdown","source":"### Box Plot \nVisualize your outliers\nThe box portion of the graph shows the range of the median values. The part between the whiskers (two horizontal black lines) shows the true distribution. Points outside the whiskers are outliers.","metadata":{}},{"cell_type":"code","source":"sns.boxplot(data=data['Age'], color = (0.8, 0.6,1)) # The points outside the whiskers are outliers","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:38:35.926622Z","iopub.execute_input":"2025-01-16T13:38:35.927009Z","iopub.status.idle":"2025-01-16T13:38:36.076921Z","shell.execute_reply.started":"2025-01-16T13:38:35.926979Z","shell.execute_reply":"2025-01-16T13:38:36.075382Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Remove the Outliers","metadata":{}},{"cell_type":"markdown","source":"We are going to be removing the Outliers using IQR - Inter Quartile Range.\nYou can consider it this way - every data follows a distribution, we are cutting the endmost portions cause that is where the outliers lie. Simple everyday example - cutting splitends - except here we are cutting on both ends.","metadata":{}},{"cell_type":"code","source":"def iqr(data):\n    q1 = data.quantile(0.25)\n    q3 = data.quantile(0.75)\n\n    iqr = q3 - q1\n\n    return iqr, q1, q3","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:43:21.027924Z","iopub.execute_input":"2025-01-16T13:43:21.028319Z","iopub.status.idle":"2025-01-16T13:43:21.033658Z","shell.execute_reply.started":"2025-01-16T13:43:21.028278Z","shell.execute_reply":"2025-01-16T13:43:21.032474Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"iqr, q1, q3 = iqr(data['Age'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:43:22.407507Z","iopub.execute_input":"2025-01-16T13:43:22.407933Z","iopub.status.idle":"2025-01-16T13:43:22.415331Z","shell.execute_reply.started":"2025-01-16T13:43:22.407902Z","shell.execute_reply":"2025-01-16T13:43:22.414168Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data_cleaned = data[(data['Age'] <= upper_limit) & (data['Age'] >= lower_limit)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:43:24.883630Z","iopub.execute_input":"2025-01-16T13:43:24.883965Z","iopub.status.idle":"2025-01-16T13:43:24.891208Z","shell.execute_reply.started":"2025-01-16T13:43:24.883938Z","shell.execute_reply":"2025-01-16T13:43:24.889894Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data_cleaned.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T13:43:35.463103Z","iopub.execute_input":"2025-01-16T13:43:35.463491Z","iopub.status.idle":"2025-01-16T13:43:35.475870Z","shell.execute_reply.started":"2025-01-16T13:43:35.463457Z","shell.execute_reply":"2025-01-16T13:43:35.474819Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Cleaning Part 2 - Removing Unnecessary Columns","metadata":{}},{"cell_type":"markdown","source":"When it comes to world of Data Science we encounter something called \"Resource Bottlenecks\". This exhibits itself in the form of insufficient computational power. Now size affects this a lot. You want to train something faster - make it smaller. But less data = equals a not very robust model. This is why we keep the data we need and normalize it. We get rid of unwanted data. The normalizing part is for another session. The deleting part - we are doing it now.","metadata":{}},{"cell_type":"markdown","source":"In our case the unnecessary columns are Ticket, Cabin, Embarked. We don't gain much information from them","metadata":{}},{"cell_type":"code","source":"data_cleaned.drop(['Ticket', 'Cabin', 'Embarked'], axis = 1, inplace = True) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T14:28:41.977091Z","iopub.execute_input":"2025-01-16T14:28:41.977509Z","iopub.status.idle":"2025-01-16T14:28:41.982200Z","shell.execute_reply.started":"2025-01-16T14:28:41.977474Z","shell.execute_reply":"2025-01-16T14:28:41.980896Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"axis 1 means columns\n\ninplace true - this will apply the function on the dataframe rather than on a copy, be careful when using this, if you make a mistake its hard to correct, you will have to run all cells again - the purpose of a notebook is avoiding that","metadata":{}},{"cell_type":"code","source":"data_cleaned","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-16T14:28:32.790081Z","iopub.execute_input":"2025-01-16T14:28:32.790491Z","iopub.status.idle":"2025-01-16T14:28:32.806382Z","shell.execute_reply.started":"2025-01-16T14:28:32.790453Z","shell.execute_reply":"2025-01-16T14:28:32.805500Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"On our level we can ignore embarked, but for a higher level analysis keeping it might be useful as there might be a small relation with other columns. If a particular area has more rich people then if a person is from that place they have a higher chance of surviving but, currently we are more focused on lower order relationships. This is a fun thing to note tho. But we already have a better column Pclass which gives us more insights into who survived","metadata":{}},{"cell_type":"markdown","source":"### Exercise for you!\nDrop the Fare column - we already know the class details, so no need for feature engineering from the ticket Fare.","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Don't stop here. Experiment more with this dataset. We shall be seeing some other pandas functions and methods. ","metadata":{}},{"cell_type":"markdown","source":"# Structured Workflow with some more Functions","metadata":{}},{"cell_type":"markdown","source":"Here is a general flow and some more functions that you can use as a reference.","metadata":{}},{"cell_type":"markdown","source":"## Step 0: Imports and Reading Data","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\nplt.style.use('ggplot')\npd.set_option('max_columns', 200)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/rollercoaster-database/coaster_db.csv')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Step 1: Data Understanding\n- Dataframe `shape`\n- `head` and `tail`\n- `dtypes`\n- `describe`\n","metadata":{}},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head(5)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.dtypes","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Step 2: Data Preperation\n- Dropping irrelevant columns and rows\n- Identifying duplicated columns\n- Renaming Columns\n- Feature Creation","metadata":{}},{"cell_type":"code","source":"# Example of dropping columns\n# df.drop(['Opening date'], axis=1)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = df[['coaster_name',\n    # 'Length', 'Speed',\n    'Location', 'Status',\n    # 'Opening date',\n    #   'Type',\n    'Manufacturer',\n#     'Height restriction', 'Model', 'Height',\n#        'Inversions', 'Lift/launch system', 'Cost', 'Trains', 'Park section',\n#        'Duration', 'Capacity', 'G-force', 'Designer', 'Max vertical angle',\n#        'Drop', 'Soft opening date', 'Fast Lane available', 'Replaced',\n#        'Track layout', 'Fastrack available', 'Soft opening date.1',\n#        'Closing date',\n#     'Opened', \n    # 'Replaced by', 'Website',\n#        'Flash Pass Available', 'Must transfer from wheelchair', 'Theme',\n#        'Single rider line available', 'Restraint Style',\n#        'Flash Pass available', 'Acceleration', 'Restraints', 'Name',\n       'year_introduced',\n        'latitude', 'longitude',\n    'Type_Main',\n       'opening_date_clean',\n    #'speed1', 'speed2', 'speed1_value', 'speed1_unit',\n       'speed_mph', \n    #'height_value', 'height_unit',\n    'height_ft',\n       'Inversions_clean', 'Gforce_clean']].copy()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['opening_date_clean'] = pd.to_datetime(df['opening_date_clean'])","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Rename our columns\ndf = df.rename(columns={'coaster_name':'Coaster_Name',\n                   'year_introduced':'Year_Introduced',\n                   'opening_date_clean':'Opening_Date',\n                   'speed_mph':'Speed_mph',\n                   'height_ft':'Height_ft',\n                   'Inversions_clean':'Inversions',\n                   'Gforce_clean':'Gforce'})","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.isna().sum()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.loc[df.duplicated()]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Check for duplicate coaster name\ndf.loc[df.duplicated(subset=['Coaster_Name'])].head(5)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Checking an example duplicate\ndf.query('Coaster_Name == \"Crystal Beach Cyclone\"')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = df.loc[~df.duplicated(subset=['Coaster_Name','Location','Opening_Date'])] \\\n    .reset_index(drop=True).copy()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Step 3: Feature Understanding\n(Univariate analysis)\n\n- Plotting Feature Distributions\n    - Histogram\n    - KDE\n    - Boxplot","metadata":{}},{"cell_type":"code","source":"df['Year_Introduced'].value_counts()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ax = df['Year_Introduced'].value_counts() \\\n    .head(10) \\\n    .plot(kind='bar', title='Top 10 Years Coasters Introduced')\nax.set_xlabel('Year Introduced')\nax.set_ylabel('Count')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ax = df['Speed_mph'].plot(kind='hist',\n                          bins=20,\n                          title='Coaster Speed (mph)')\nax.set_xlabel('Speed (mph)')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ax = df['Speed_mph'].plot(kind='kde',\n                          title='Coaster Speed (mph)')\nax.set_xlabel('Speed (mph)')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['Type_Main'].value_counts()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Step 4: Feature Relationships\n- Scatterplot\n- Heatmap Correlation\n- Pairplot\n- Groupby comparisons","metadata":{}},{"cell_type":"code","source":"df.plot(kind='scatter',\n        x='Speed_mph',\n        y='Height_ft',\n        title='Coaster Speed vs. Height')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ax = sns.scatterplot(x='Speed_mph',\n                y='Height_ft',\n                hue='Year_Introduced',\n                data=df)\nax.set_title('Coaster Speed vs. Height')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.pairplot(df,\n             vars=['Year_Introduced','Speed_mph',\n                   'Height_ft','Inversions','Gforce'],\n            hue='Type_Main')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_corr = df[['Year_Introduced','Speed_mph',\n    'Height_ft','Inversions','Gforce']].dropna().corr()\ndf_corr","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.heatmap(df_corr, annot=True)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Step 5: Ask a Question about the data\n- Try to answer a question you have about the data using a plot or statistic.\n\nWhat are the locations with the fastest roller coasters (minimum of 10)?","metadata":{}},{"cell_type":"code","source":"ax = df.query('Location != \"Other\"') \\\n    .groupby('Location')['Speed_mph'] \\\n    .agg(['mean','count']) \\\n    .query('count >= 10') \\\n    .sort_values('mean')['mean'] \\\n    .plot(kind='barh', figsize=(12, 5), title='Average Coast Speed by Location')\nax.set_xlabel('Average Coaster Speed')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Miscellaneous","metadata":{}},{"cell_type":"markdown","source":"Here are some things you need to know about Pandas and in the end we will provide you with functions you can look up. These are more higher order functions and hence they have been added at the last like an afterthought (which they very much are).","metadata":{}},{"cell_type":"markdown","source":"## Creating your own DataFrame","metadata":{}},{"cell_type":"code","source":"# Dictionary with student details\nstudent_details = {'Names': ['A', 'B', 'C', 'D'],\n                  'Roll_no':[1,2,3,4]}\n\nstudent_data = pd.DataFrame(student_details) #using DataFrame function to create your own dataframe\n\nstudent_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-17T12:05:25.739965Z","iopub.execute_input":"2025-01-17T12:05:25.740336Z","iopub.status.idle":"2025-01-17T12:05:25.749991Z","shell.execute_reply.started":"2025-01-17T12:05:25.740308Z","shell.execute_reply":"2025-01-17T12:05:25.749077Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"  Names  Roll_no\n0     A        1\n1     B        2\n2     C        3\n3     D        4","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Names</th>\n      <th>Roll_no</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"# From lists \nStudents = [[1,'A'], [2,'B'], [3,'C']]\n\nstudent_data_from_list = pd.DataFrame(Students, columns = ['Roll_no', 'Names'])\nstudent_data_from_list","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-17T12:10:14.686683Z","iopub.execute_input":"2025-01-17T12:10:14.686998Z","iopub.status.idle":"2025-01-17T12:10:14.696164Z","shell.execute_reply.started":"2025-01-17T12:10:14.686973Z","shell.execute_reply":"2025-01-17T12:10:14.694980Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   Roll_no Names\n0        1     A\n1        2     B\n2        3     C","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Roll_no</th>\n      <th>Names</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"Names = ['A', 'B', 'C', 'D']\nRoll_no= [1,2,3,4]\n\nNames_series = pd.Series(Names)\nRoll_no_series = pd.Series(Roll_no)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-17T12:12:23.200452Z","iopub.execute_input":"2025-01-17T12:12:23.200804Z","iopub.status.idle":"2025-01-17T12:12:23.205616Z","shell.execute_reply.started":"2025-01-17T12:12:23.200775Z","shell.execute_reply":"2025-01-17T12:12:23.204474Z"}},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"Don't stop here, keep exploring, try out other functions, keep learning. Google, ChatGPT and Documentation exists, make the most of it.","metadata":{}}]}